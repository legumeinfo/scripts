.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Chado::Schema::Result::Stock::Stock 3"
.TH Bio::Chado::Schema::Result::Stock::Stock 3 "2015-04-17" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Chado::Schema::Result::Stock::Stock
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Any stock can be globally identified by the
combination of organism, uniquename and stock type. A stock is the physical entities, either living or preserved, held by collections. Stocks belong to a collection; they have IDs, type, organism, description and may have a genotype.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "stock_id"
.IX Subsection "stock_id"
.Vb 4
\&  data_type: \*(Aqinteger\*(Aq
\&  is_auto_increment: 1
\&  is_nullable: 0
\&  sequence: \*(Aqstock_stock_id_seq\*(Aq
.Ve
.SS "dbxref_id"
.IX Subsection "dbxref_id"
.Vb 3
\&  data_type: \*(Aqinteger\*(Aq
\&  is_foreign_key: 1
\&  is_nullable: 1
.Ve
.PP
The dbxref_id is an optional primary stable identifier for this stock. Secondary indentifiers and external dbxrefs go in table: stock_dbxref.
.SS "organism_id"
.IX Subsection "organism_id"
.Vb 3
\&  data_type: \*(Aqinteger\*(Aq
\&  is_foreign_key: 1
\&  is_nullable: 1
.Ve
.PP
The organism_id is the organism to which the stock belongs. This column should only be left blank if the organism cannot be determined.
.SS "name"
.IX Subsection "name"
.Vb 3
\&  data_type: \*(Aqvarchar\*(Aq
\&  is_nullable: 1
\&  size: 255
.Ve
.PP
The name is a human-readable local name for a stock.
.SS "uniquename"
.IX Subsection "uniquename"
.Vb 2
\&  data_type: \*(Aqtext\*(Aq
\&  is_nullable: 0
.Ve
.SS "description"
.IX Subsection "description"
.Vb 2
\&  data_type: \*(Aqtext\*(Aq
\&  is_nullable: 1
.Ve
.PP
The description is the genetic description provided in the stock list.
.SS "type_id"
.IX Subsection "type_id"
.Vb 3
\&  data_type: \*(Aqinteger\*(Aq
\&  is_foreign_key: 1
\&  is_nullable: 0
.Ve
.PP
The type_id foreign key links to a controlled vocabulary of stock types. The would include living stock, genomic \s-1DNA,\s0 preserved specimen. Secondary cvterms for stocks would go in stock_cvterm.
.SS "is_obsolete"
.IX Subsection "is_obsolete"
.Vb 3
\&  data_type: \*(Aqboolean\*(Aq
\&  default_value: false
\&  is_nullable: 0
.Ve
.SH "RELATIONS"
.IX Header "RELATIONS"
.SS "nd_experiment_stocks"
.IX Subsection "nd_experiment_stocks"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdExperimentStock
.SS "dbxref"
.IX Subsection "dbxref"
Type: belongs_to
.PP
Related object: Bio::Chado::Schema::Result::General::Dbxref
.SS "type"
.IX Subsection "type"
Type: belongs_to
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvterm
.SS "organism"
.IX Subsection "organism"
Type: belongs_to
.PP
Related object: Bio::Chado::Schema::Result::Organism::Organism
.SS "stockcollection_stocks"
.IX Subsection "stockcollection_stocks"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockcollectionStock
.SS "stock_cvterms"
.IX Subsection "stock_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockCvterm
.SS "stock_dbxrefs"
.IX Subsection "stock_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockDbxref
.SS "stock_genotypes"
.IX Subsection "stock_genotypes"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockGenotype
.SS "stockprops"
.IX Subsection "stockprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::Stockprop
.SS "stock_pubs"
.IX Subsection "stock_pubs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockPub
.SS "stock_relationship_subjects"
.IX Subsection "stock_relationship_subjects"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockRelationship
.SS "stock_relationship_objects"
.IX Subsection "stock_relationship_objects"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockRelationship
.SS "create_stockprops"
.IX Subsection "create_stockprops"
.Vb 10
\&  Usage: $set\->create_stockprops({ baz => 2, foo => \*(Aqbar\*(Aq });
\&  Desc : convenience method to create stock properties using cvterms
\&          from the ontology with the given name
\&  Args : hashref of { propname => value, ...},
\&         options hashref as:
\&          {
\&            autocreate => 0,
\&               (optional) boolean, if passed, automatically create cv,
\&               cvterm, and dbxref rows if one cannot be found for the
\&               given stockprop name.  Default false.
\&
\&            cv_name => cv.name to use for the given stockprops.
\&                       Defaults to \*(Aqstock_property\*(Aq,
\&
\&            db_name => db.name to use for autocreated dbxrefs,
\&                       default \*(Aqnull\*(Aq,
\&
\&            dbxref_accession_prefix => optional, default
\&                                       \*(Aqautocreated:\*(Aq,
\&            definitions => optional hashref of:
\&                { cvterm_name => definition,
\&                }
\&             to load into the cvterm table when autocreating cvterms
\&
\&             rank => force numeric rank. Be careful not to pass ranks that already exist
\&                     for the property type. The function will die in such case.
\&
\&             allow_duplicate_values => default false.
\&                If true, allow duplicate instances of the same stock
\&                and value in the properties of the stock.  Duplicate
\&                values will have different ranks.
\&          }
\&  Ret  : hashref of { propname => new stockprop object }
.Ve
.SH "ADDITIONAL METHODS"
.IX Header "ADDITIONAL METHODS"
.SS "stock_phenotypes_rs"
.IX Subsection "stock_phenotypes_rs"
.Vb 10
\&   Usage: $schema\->resultset("Stock::Stock")\->stock_phenotypes_rs($stock_rs);
\&   Desc:  retrieve a resultset for stock(s) with phenotyping experiments with the following values mapped to [column name]
\&          stock_id [stock_id]
\&          phenotype.value [value]
\&          observable.name [observable] (the cvterm name for the phenotype.observable field)
\&          observable_cvterm_id [observable_id]
\&          observable.definition [definition]
\&          unit_name (from phenotype_cvterm)
\&          cv_name (the cv_name for the phenotype_cvterm)
\&          type_name (the cvterm name for the phenotype_cvterm)
\&          method_name (a phenotypeprop value)
\&          dbxref.accession [accession] of the observable cvterm
\&          db.name of the observable cvterm [db_name] (useful for constructing the ontology ID of the observable)
\&          project.description [project_description] (useful for grouping phenotype values by projects)
\&   Args:  a L<Bio::Chado::Schema::Result::Stock::Stock>  resultset
\&   Ret:   a resultset with the above columns. Access the data with e.g. $rs\->get_column(\*(Aqstock_id\*(Aq)
.Ve
.SS "recursive_phenotypes_rs"
.IX Subsection "recursive_phenotypes_rs"
.Vb 4
\&    Usage: $schema\->resultset("Stock::Stock")\->recursive_phenotypes_rs($stock_rs, \e@results)
\&    Desc: Retrieve recursively phenotypes of stock objects and their subjects
\&    Args: Stock resultSet and an arrayref with the results
\&    Ret: listref of stock_phenotypes_rs (see function stock_phenotypes_rs for columns fetched)
.Ve
.SS "stock_genotypes_rs"
.IX Subsection "stock_genotypes_rs"
.Vb 9
\&   Usage: $schema\->resultset("Stock::Stock")\->stock_genotypes_rs($stock_rs);
\&   Desc:  retrieve a resultset for stock(s) with genotyping experiments
\&          with the following values mapped to [column name]
\&          stock_id [stock_id]
\&          genotype.name [name]
\&          genotype.uniquname [uniquename]
\&          genotype.description [description]
\&          genotype.type.name [type_name] (the cvterm name for the genotype type)
\&          propvalue [propvalue] (a genotypeprop value)
\&
\&   Args:  a L<Bio::Chado::Schema::Result::Stock::Stock> resultset
\&   Ret:   a resultset with the above columns. Access the data with e.g. $rs\->get_column(\*(Aqstock_id\*(Aq)
.Ve
.SS "stock_project_phenotypes"
.IX Subsection "stock_project_phenotypes"
.Vb 6
\&   Usage: $schema\->resultset("Stock::Stock")\->stock_project_phenotypes($stock_rs);
\&   Desc:  retrieve a list of phenotype resultsets by project name
\&   Args:  a L<Bio::Chado::Schema::Result::Stock::Stock> object or a stock resultset
\&   Ret:   hashref key = project descriptions, values = hash ref of
\&          {phenotypes} = phenotype resultset
\&          {project}   =  L<Bio::Chado::Schema::Result::Project::Project> object
.Ve
