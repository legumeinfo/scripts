.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Chado::Schema::Result::Cv::Cvterm 3"
.TH Bio::Chado::Schema::Result::Cv::Cvterm 3 "2015-04-17" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Chado::Schema::Result::Cv::Cvterm
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A term, class, universal or type within an
ontology or controlled vocabulary.  This table is also used for
relations and properties. cvterms constitute nodes in the graph
defined by the collection of cvterms and cvterm_relationships.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "cvterm_id"
.IX Subsection "cvterm_id"
.Vb 4
\&  data_type: \*(Aqinteger\*(Aq
\&  is_auto_increment: 1
\&  is_nullable: 0
\&  sequence: \*(Aqcvterm_cvterm_id_seq\*(Aq
.Ve
.SS "cv_id"
.IX Subsection "cv_id"
.Vb 3
\&  data_type: \*(Aqinteger\*(Aq
\&  is_foreign_key: 1
\&  is_nullable: 0
.Ve
.PP
The cv or ontology or namespace to which
this cvterm belongs.
.SS "name"
.IX Subsection "name"
.Vb 3
\&  data_type: \*(Aqvarchar\*(Aq
\&  is_nullable: 0
\&  size: 1024
.Ve
.PP
A concise human-readable name or
label for the cvterm. Uniquely identifies a cvterm within a cv.
.SS "definition"
.IX Subsection "definition"
.Vb 2
\&  data_type: \*(Aqtext\*(Aq
\&  is_nullable: 1
.Ve
.PP
A human-readable text
definition.
.SS "dbxref_id"
.IX Subsection "dbxref_id"
.Vb 3
\&  data_type: \*(Aqinteger\*(Aq
\&  is_foreign_key: 1
\&  is_nullable: 0
.Ve
.PP
Primary identifier dbxref \- The
unique global \s-1OBO\s0 identifier for this cvterm.  Note that a cvterm may
have multiple secondary dbxrefs \- see also table: cvterm_dbxref.
.SS "is_obsolete"
.IX Subsection "is_obsolete"
.Vb 3
\&  data_type: \*(Aqinteger\*(Aq
\&  default_value: 0
\&  is_nullable: 0
.Ve
.PP
Boolean 0=false,1=true; see
\&\s-1GO\s0 documentation for details of obsoletion. Note that two terms with
different primary dbxrefs may exist if one is obsolete.
.SS "is_relationshiptype"
.IX Subsection "is_relationshiptype"
.Vb 3
\&  data_type: \*(Aqinteger\*(Aq
\&  default_value: 0
\&  is_nullable: 0
.Ve
.PP
Boolean
0=false,1=true relations or relationship types (also known as Typedefs
in \s-1OBO\s0 format, or as properties or slots) form a cv/ontology in
themselves. We use this flag to indicate whether this cvterm is an
actual term/class/universal or a relation. Relations may be drawn from
the \s-1OBO\s0 Relations ontology, but are not exclusively drawn from there.
.SH "RELATIONS"
.IX Header "RELATIONS"
.SS "acquisitionprops"
.IX Subsection "acquisitionprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Acquisitionprop
.SS "acquisition_relationships"
.IX Subsection "acquisition_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::AcquisitionRelationship
.SS "analysisfeatureprops"
.IX Subsection "analysisfeatureprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Companalysis::Analysisfeatureprop
.SS "analysisprops"
.IX Subsection "analysisprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Companalysis::Analysisprop
.SS "arraydesign_platformtypes"
.IX Subsection "arraydesign_platformtypes"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Arraydesign
.SS "arraydesign_substratetypes"
.IX Subsection "arraydesign_substratetypes"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Arraydesign
.SS "arraydesignprops"
.IX Subsection "arraydesignprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Arraydesignprop
.SS "assayprops"
.IX Subsection "assayprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Assayprop
.SS "biomaterialprops"
.IX Subsection "biomaterialprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Biomaterialprop
.SS "biomaterial_relationships"
.IX Subsection "biomaterial_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::BiomaterialRelationship
.SS "biomaterial_treatments"
.IX Subsection "biomaterial_treatments"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::BiomaterialTreatment
.SS "cell_line_cvterms"
.IX Subsection "cell_line_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::CellLine::CellLineCvterm
.SS "cell_line_cvtermprops"
.IX Subsection "cell_line_cvtermprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::CellLine::CellLineCvtermprop
.SS "cell_lineprops"
.IX Subsection "cell_lineprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::CellLine::CellLineprop
.SS "cell_line_relationships"
.IX Subsection "cell_line_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::CellLine::CellLineRelationship
.SS "chadoprops"
.IX Subsection "chadoprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Chadoprop
.SS "contacts"
.IX Subsection "contacts"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Contact::Contact
.SS "contact_relationships"
.IX Subsection "contact_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Contact::ContactRelationship
.SS "controls"
.IX Subsection "controls"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Control
.SS "cvprops"
.IX Subsection "cvprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvprop
.SS "cv"
.IX Subsection "cv"
Type: belongs_to
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cv
.SS "dbxref"
.IX Subsection "dbxref"
Type: belongs_to
.PP
Related object: Bio::Chado::Schema::Result::General::Dbxref
.SS "cvterm_dbxrefs"
.IX Subsection "cvterm_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::CvtermDbxref
.SS "cvtermpath_types"
.IX Subsection "cvtermpath_types"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvtermpath
.SS "cvtermpath_objects"
.IX Subsection "cvtermpath_objects"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvtermpath
.SS "cvtermpath_subjects"
.IX Subsection "cvtermpath_subjects"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvtermpath
.SS "cvtermprop_types"
.IX Subsection "cvtermprop_types"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvtermprop
.SS "cvtermprops"
.IX Subsection "cvtermprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvtermprop
.SS "cvterm_relationship_types"
.IX Subsection "cvterm_relationship_types"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::CvtermRelationship
.SS "cvterm_relationship_objects"
.IX Subsection "cvterm_relationship_objects"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::CvtermRelationship
.SS "cvterm_relationship_subjects"
.IX Subsection "cvterm_relationship_subjects"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::CvtermRelationship
.SS "cvtermsynonym_types"
.IX Subsection "cvtermsynonym_types"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvtermsynonym
.SS "cvtermsynonyms"
.IX Subsection "cvtermsynonyms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvtermsynonym
.SS "dbxrefprops"
.IX Subsection "dbxrefprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Dbxrefprop
.SS "elements"
.IX Subsection "elements"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Element
.SS "element_relationships"
.IX Subsection "element_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::ElementRelationship
.SS "elementresult_relationships"
.IX Subsection "elementresult_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::ElementresultRelationship
.SS "environment_cvterms"
.IX Subsection "environment_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Genetic::EnvironmentCvterm
.SS "expression_cvterm_cvterms"
.IX Subsection "expression_cvterm_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Expression::ExpressionCvterm
.SS "expression_cvterm_cvterm_types"
.IX Subsection "expression_cvterm_cvterm_types"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Expression::ExpressionCvterm
.SS "expression_cvtermprops"
.IX Subsection "expression_cvtermprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Expression::ExpressionCvtermprop
.SS "expressionprops"
.IX Subsection "expressionprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Expression::Expressionprop
.SS "features"
.IX Subsection "features"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::Feature
.SS "feature_cvterms"
.IX Subsection "feature_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::FeatureCvterm
.SS "feature_cvtermprops"
.IX Subsection "feature_cvtermprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::FeatureCvtermprop
.SS "feature_expressionprops"
.IX Subsection "feature_expressionprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Expression::FeatureExpressionprop
.SS "feature_genotypes"
.IX Subsection "feature_genotypes"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Genetic::FeatureGenotype
.SS "featuremaps"
.IX Subsection "featuremaps"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Map::Featuremap
.SS "featureprops"
.IX Subsection "featureprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::Featureprop
.SS "feature_pubprops"
.IX Subsection "feature_pubprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::FeaturePubprop
.SS "feature_relationships"
.IX Subsection "feature_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::FeatureRelationship
.SS "feature_relationshipprops"
.IX Subsection "feature_relationshipprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::FeatureRelationshipprop
.SS "genotypes"
.IX Subsection "genotypes"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Genetic::Genotype
.SS "genotypeprops"
.IX Subsection "genotypeprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Genetic::Genotypeprop
.SS "libraries"
.IX Subsection "libraries"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Library::Library
.SS "library_cvterms"
.IX Subsection "library_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Library::LibraryCvterm
.SS "libraryprops"
.IX Subsection "libraryprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Library::Libraryprop
.SS "nd_experiments"
.IX Subsection "nd_experiments"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdExperiment
.SS "nd_experimentprops"
.IX Subsection "nd_experimentprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdExperimentprop
.SS "nd_experiment_stocks"
.IX Subsection "nd_experiment_stocks"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdExperimentStock
.SS "nd_experiment_stockprops"
.IX Subsection "nd_experiment_stockprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdExperimentStockprop
.SS "nd_geolocationprops"
.IX Subsection "nd_geolocationprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdGeolocationprop
.SS "nd_protocols"
.IX Subsection "nd_protocols"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdProtocol
.SS "nd_protocolprops"
.IX Subsection "nd_protocolprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdProtocolprop
.SS "nd_protocol_reagents"
.IX Subsection "nd_protocol_reagents"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdProtocolReagent
.SS "nd_reagents"
.IX Subsection "nd_reagents"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdReagent
.SS "nd_reagentprops"
.IX Subsection "nd_reagentprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdReagentprop
.SS "nd_reagent_relationships"
.IX Subsection "nd_reagent_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdReagentRelationship
.SS "organismprops"
.IX Subsection "organismprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Organism::Organismprop
.SS "phendescs"
.IX Subsection "phendescs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Genetic::Phendesc
.SS "phenotype_assays"
.IX Subsection "phenotype_assays"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phenotype::Phenotype
.SS "phenotype_attrs"
.IX Subsection "phenotype_attrs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phenotype::Phenotype
.SS "phenotype_observables"
.IX Subsection "phenotype_observables"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phenotype::Phenotype
.SS "phenotype_cvalues"
.IX Subsection "phenotype_cvalues"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phenotype::Phenotype
.SS "phenotype_comparison_cvterms"
.IX Subsection "phenotype_comparison_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Genetic::PhenotypeComparisonCvterm
.SS "phenotype_cvterms"
.IX Subsection "phenotype_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phenotype::PhenotypeCvterm
.SS "phenotypeprops"
.IX Subsection "phenotypeprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phenotype::Phenotypeprop
.SS "phenstatements"
.IX Subsection "phenstatements"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Genetic::Phenstatement
.SS "phylonodes"
.IX Subsection "phylonodes"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phylogeny::Phylonode
.SS "phylonodeprops"
.IX Subsection "phylonodeprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phylogeny::Phylonodeprop
.SS "phylonode_relationships"
.IX Subsection "phylonode_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phylogeny::PhylonodeRelationship
.SS "phylotrees"
.IX Subsection "phylotrees"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phylogeny::Phylotree
.SS "projectprops"
.IX Subsection "projectprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Project::Projectprop
.SS "project_relationships"
.IX Subsection "project_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Project::ProjectRelationship
.SS "protocols"
.IX Subsection "protocols"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Protocol
.SS "protocolparam_unittypes"
.IX Subsection "protocolparam_unittypes"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Protocolparam
.SS "protocolparam_datatypes"
.IX Subsection "protocolparam_datatypes"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Protocolparam
.SS "pubs"
.IX Subsection "pubs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Pub::Pub
.SS "pubprops"
.IX Subsection "pubprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Pub::Pubprop
.SS "pub_relationships"
.IX Subsection "pub_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Pub::PubRelationship
.SS "quantificationprops"
.IX Subsection "quantificationprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Quantificationprop
.SS "quantification_relationships"
.IX Subsection "quantification_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::QuantificationRelationship
.SS "stocks"
.IX Subsection "stocks"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::Stock
.SS "stockcollections"
.IX Subsection "stockcollections"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::Stockcollection
.SS "stockcollectionprops"
.IX Subsection "stockcollectionprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::Stockcollectionprop
.SS "stock_cvterms"
.IX Subsection "stock_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockCvterm
.SS "stock_cvtermprops"
.IX Subsection "stock_cvtermprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockCvtermprop
.SS "stock_dbxrefprops"
.IX Subsection "stock_dbxrefprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockDbxrefprop
.SS "stockprops"
.IX Subsection "stockprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::Stockprop
.SS "stock_relationships"
.IX Subsection "stock_relationships"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockRelationship
.SS "stock_relationship_cvterms"
.IX Subsection "stock_relationship_cvterms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockRelationshipCvterm
.SS "studydesignprops"
.IX Subsection "studydesignprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Studydesignprop
.SS "studyfactors"
.IX Subsection "studyfactors"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Studyfactor
.SS "studyprops"
.IX Subsection "studyprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Studyprop
.SS "studyprop_features"
.IX Subsection "studyprop_features"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::StudypropFeature
.SS "synonyms"
.IX Subsection "synonyms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::Synonym
.SS "treatments"
.IX Subsection "treatments"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Treatment
.SH "ADDITIONAL RELATIONS"
.IX Header "ADDITIONAL RELATIONS"
.SS "cvtermprops"
.IX Subsection "cvtermprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvtermprop
.PP
This \f(CW\*(C`cvtermprops\*(C'\fR relation is a convenient synonym for the
autogenerated \*(L"cvtermprop_cvterms\*(R" above, since most often you want
the properties for the cvterm itself.
.PP
If you really do want the Cvtermprop rows that have this cvterm as
their \fBtype\fR, use \f(CW\*(C`cvtermprop_types\*(C'\fR, listed above.
.SS "cvtermsynonyms"
.IX Subsection "cvtermsynonyms"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvtermsynonym
.SH "ADDITIONAL METHODS"
.IX Header "ADDITIONAL METHODS"
.SS "add_synonym"
.IX Subsection "add_synonym"
.Vb 12
\& Usage:        $self\->add_synonym($synonym , { type => \*(Aqexact\*(Aq , autocreate => 1} );
\& Desc:         adds the synonym $new_synonym to this cvterm
\&               If the synonym $new_synonym already exists,
\&               nothing is added.
\& Args:         a synonym name  and
\&    options hashref as:
\&          {
\&            synonym_type => [e.g. exact, narrow, broad, related],
\&            autocreate => 0,
\&               (optional) boolean, if passed, automatically create cv,
\&               cvterm, and dbxref rows if one cannot be found for the
\&               given synonym name.  Default false.
\&
\&            cv_name => cv.name to use for the given synonym type.
\&                       Defaults to \*(Aqsynonym_type\*(Aq,
\&
\&            db_name => db.name to use for autocreated dbxrefs,
\&                       default \*(Aqnull\*(Aq,
\&
\&            definitions => optional hashref of:
\&                { cvterm_name => definition,
\&                }
\&             to load into the cvterm table when autocreating cvterms
\&          }
\& Ret:          a Cvtermsynonym object
.Ve
.SS "delete_synonym"
.IX Subsection "delete_synonym"
.Vb 5
\& Usage: $self\->delete_synonym($synonym)
\& Desc:  delete synonym $synonym from cvterm object
\&  Ret:  nothing
\& Args: $synonym
\& Side Effects: Will delete all cvtermsynonyms with synonym=$synonym. Case insensitive
.Ve
.SS "get_secondary_dbxrefs"
.IX Subsection "get_secondary_dbxrefs"
.Vb 6
\& Usage: $self\->get_secondary_dbxrefs()
\& Desc:  find all secondary accessions associated with the cvterm
\&         These are stored in cvterm_dbxref table as dbxref_ids
\& Ret:    a list of accessions (e.g. GO:0000123)
\& Args:   none
\& Side Effects: none
.Ve
.SS "add_secondary_dbxref"
.IX Subsection "add_secondary_dbxref"
.Vb 5
\& Usage: $self\->add_secondary_dbxref(accession, 1)
\& Desc:  add an alternative id to cvterm. Stores in cvterm_dbxref
\& Ret:   a CvtermDbxref object
\& Args:  an alternative id (i.e. "GO:0001234"). A second arg will store a is_for_definition=1 (default = 0)
\& Side Effects: stores a new dbxref if accession is not found in dbxref table
.Ve
.SS "delete_secondary_dbxref"
.IX Subsection "delete_secondary_dbxref"
.Vb 5
\& Usage: $self\->delete_secondary_dbxref($accession)
\& Desc:  delete a cvterm_dbxref from the database
\& Ret:   nothing
\& Args:  full accession (db_name:dbxref_accession e.g. PO:0001234)
\& Side Effects:
.Ve
.SS "create_cvtermprops"
.IX Subsection "create_cvtermprops"
.Vb 10
\&  Usage: $set\->create_cvtermprops({ baz => 2, foo => \*(Aqbar\*(Aq });
\&  Desc : convenience method to create cvterm properties using cvterms
\&          from the ontology with the given name
\&  Args : hashref of { propname => value, ...},
\&         options hashref as:
\&          {
\&            autocreate => 0,
\&               (optional) boolean, if passed, automatically create cv,
\&               cvterm, and dbxref rows if one cannot be found for the
\&               given cvtermprop name.  Default false.
\&
\&            cv_name => cv.name to use for the given cvtermprops.
\&                       Defaults to \*(Aqcvterm_property\*(Aq,
\&
\&            db_name => db.name to use for autocreated dbxrefs,
\&                       default \*(Aqnull\*(Aq,
\&
\&            dbxref_accession_prefix => optional, default
\&                                       \*(Aqautocreated:\*(Aq,
\&            definitions => optional hashref of:
\&                { cvterm_name => definition,
\&                }
\&             to load into the cvterm table when autocreating cvterms
\&
\&             rank => force numeric rank. Be careful not to pass ranks that already exist
\&                     for the property type. The function will die in such case.
\&
\&             allow_duplicate_values => default false.
\&                If true, allow duplicate instances of the same cvterm
\&                and value in the properties of the cvterm.  Duplicate
\&                values will have different ranks.
\&          }
\&  Ret  : hashref of { propname => new cvtermprop object }
.Ve
.SS "root"
.IX Subsection "root"
.Vb 4
\& Usage: $self\->root
\& Desc:  find the root cvterm
\& Ret:   Cvterm object
\& Args:  none
.Ve
.PP
\&\s-1NOTE:\s0 This method requires that your \f(CW\*(C`cvtermpath\*(C'\fR table is populated.
.SS "children"
.IX Subsection "children"
.Vb 2
\& Usage: $self\->children
\& Desc:  find the direct children of the cvterm
\&
\& Ret: L<Bio::Chado::Schema::Result::Cv::CvtermRelationship> resultset of the
\&      fetched child terms (this can be used in your program to find the
\&       relationship type id of each child term)
\& Args:  none
.Ve
.SS "direct_children"
.IX Subsection "direct_children"
.Vb 5
\& Usage: $self\->direct_children
\& Desc:  find only the direct children of your term
\& Ret:   L<Bio::Chado::Schema::Result::Cv::Cvterm>
\& Args:  none
\& Side Effects: none
.Ve
.PP
\&\s-1NOTE:\s0 This method requires that your \f(CW\*(C`cvtermpath\*(C'\fR table is populated.
.SS "recursive_children"
.IX Subsection "recursive_children"
.Vb 5
\& Usage: $self\->recursive_children
\& Desc:   find all the descendants of the cvterm (children, children of children, and so on)
\& Ret: a DBIC resultset of L<Bio::Chado::Schema::Result::Cv::Cvterm>
\& Args: none
\& Side Effects: none
.Ve
.PP
\&\s-1NOTE:\s0 This method requires that your \f(CW\*(C`cvtermpath\*(C'\fR table is populated.
.SS "parents"
.IX Subsection "parents"
.Vb 5
\& Usage: my $self\->parents
\& Desc:  Find the direct parents of the cvterm
\& Ret:  L<Bio::Chado::Schema::Result::Cv::CvtermRelationship> resultset of the parent terms
\& Args:  none
\& Side Effects: none
.Ve
.SS "direct_parents"
.IX Subsection "direct_parents"
.Vb 5
\& Usage: $self\->direct_parents
\& Desc:  get only the direct parents of the cvterm (from the cvtermpath)
\& Ret:   L<Bio::Chado::Schema::Result::Cv::Cvterm>
\& Args:  none
\& Side Effects: none
.Ve
.PP
\&\s-1NOTE:\s0 This method requires that your \f(CW\*(C`cvtermpath\*(C'\fR table is populated.
.SS "recursive_parents"
.IX Subsection "recursive_parents"
.Vb 5
\& Usage: $self\->recursive_parents
\& Desc:   find all the ancestors of the cvterm (parents, parents of parents, and so on)
\& Ret: L<Bio::Chado::Schema::Result::Cv::Cvterm> resultset
\& Args: none
\& Side Effects: none
.Ve
.PP
\&\s-1NOTE:\s0 This method requires that your \f(CW\*(C`cvtermpath\*(C'\fR table is populated.
.SS "create_with"
.IX Subsection "create_with"
.Vb 6
\& Usage: $schema\->resultset(\*(AqCv::Cvterm\*(Aq)\->create_with(
\&                  { name   => \*(Aqcvterm name\*(Aq,
\&                    cv     => $cv  || \*(Aqcv name\*(Aq,
\&                    db     => $db  || \*(Aqdb name\*(Aq,
\&                    dbxref => $dbx || \*(Aqaccession\*(Aq,
\&                  });
\&
\& Desc: convenience method to create a cvterm, linking it to the CV and
\&       DB that you name or provide.  For any cv, db, or dbxref that
\&       you call only by name, does a find_or_create() using that name.
\& Ret : a new Cvterm row
\& Args: hashref of:
\&         { name   => \*(Aqcvterm name\*(Aq,
\&           cv     => \*(Aqcv name\*(Aq or L<Bio::Chado::Schema::Result::Cv::Cvterm> row,
\&           db     => \*(Aqdb name\*(Aq or L<Bio::Chado::Schema::Result::General::Db> row,
\&           dbxref => \*(Aqaccession\*(Aq or L<Bio::Chado::Schema::Result::General::Dbxref> row,
\&         }
.Ve
