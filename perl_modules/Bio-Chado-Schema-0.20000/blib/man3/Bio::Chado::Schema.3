.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Chado::Schema 3"
.TH Bio::Chado::Schema 3 "2015-04-17" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Chado::Schema \- A standard DBIx::Class layer for the Chado database schema.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Chado::Schema;
\&
\&  my $chado = Bio::Chado::Schema\->connect( $dsn, $user, $password );
\&
\&  print "number of rows in feature table: ",
\&        $chado\->resultset(\*(AqSequence::Feature\*(Aq)\->count,
\&        "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a standard object-relational mapping layer for use with the
\&\s-1GMOD\s0 Chado database schema.  This layer is implemented with
DBIx::Class, generated with the help of the very fine
DBIx::Class::Schema::Loader module.
.PP
Chado is an open-source modular database schema for biological data.
It is divided into several notional \*(L"modules\*(R", which are reflected in
the namespace organization of this package.  Note that modules in the
Chado context refers to sets of tables, they are not modules in the
Perl sense.
.SH "GETTING STARTED"
.IX Header "GETTING STARTED"
To learn how to use this DBIx::Class \s-1ORM\s0 layer, a good starting
point is the DBIx::Class::Manual.
.SH "CHADO MODULES COVERED BY THIS PACKAGE"
.IX Header "CHADO MODULES COVERED BY THIS PACKAGE"
Bio::Chado::Schema::CellLine
.PP
Bio::Chado::Schema::Companalysis
.PP
Bio::Chado::Schema::Composite
.PP
Bio::Chado::Schema::Contact
.PP
Bio::Chado::Schema::Cv
.PP
Bio::Chado::Schema::Expression
.PP
Bio::Chado::Schema::General
.PP
Bio::Chado::Schema::Genetic
.PP
Bio::Chado::Schema::Library
.PP
Bio::Chado::Schema::Mage
.PP
Bio::Chado::Schema::Map
.PP
Bio::Chado::Schema::NaturalDiversity
.PP
Bio::Chado::Schema::Organism
.PP
Bio::Chado::Schema::Phenotype
.PP
Bio::Chado::Schema::Phylogeny
.PP
Bio::Chado::Schema::Project
.PP
Bio::Chado::Schema::Pub
.PP
Bio::Chado::Schema::Sequence
.PP
Bio::Chado::Schema::Stock
.SH "CHADO VERSIONS"
.IX Header "CHADO VERSIONS"
Basically, \s-1BCS\s0 has always followed the \s-1SVN HEAD\s0 of Chado, since it's
on a much faster release cycle than Chado itself.
.PP
Most users will not experience incompatibilities using the most recent
versions of Bio::Chado::Schema with older Chado installations.
However, if you encounter problems using Bio::Chado::Schema with an
older Chado schema, you may want to try downgrading to an earlier
version of Bio::Chado::Schema.  The following rough equivalencies hold
between \s-1BCS\s0 and Chado versions:
.PP
.Vb 4
\&  Chado 1.2   \-\-  BCS 0.09000
\&  Chado 1.11  \-\-  BCS 0.05801
\&  Chado 1.1   \-\-  BCS 0.05801
\&  older       \-\-  BCS 0.03100
.Ve
.SH "SCHEMA OBJECT METHODS"
.IX Header "SCHEMA OBJECT METHODS"
.ie n .SS "get_cvterm( ""$cv_name:$cvterm_name"" ) \s-1OR\s0 get_cvterm( $cv_name, $cvterm_name )"
.el .SS "get_cvterm( ``$cv_name:$cvterm_name'' ) \s-1OR\s0 get_cvterm( \f(CW$cv_name\fP, \f(CW$cvterm_name\fP )"
.IX Subsection "get_cvterm( $cv_name:$cvterm_name ) OR get_cvterm( $cv_name, $cvterm_name )"
Convenience method to for finding single cvterms based on the text
name of the \s-1CV\s0 and the term.  The cvterm objects found with this
method are cached in the schema object itself.  Thus, you only use
this function in the (relatively common) scenario in which you just
need convenient access to a handful of different cvterms.
.SS "get_cvterm_or_die"
.IX Subsection "get_cvterm_or_die"
Same as get_cvterm above, but dies with a \*(L"not found\*(R" message if the
cvterm is not found.  This is convenient when you don't want to be
bothered with checking the return value of \f(CW\*(C`get_cvterm\*(C'\fR, which for me
is most of the time.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.ie n .SS "plugin_add_relationship( 'ChadoModule::SourceName', 'reltype', @args )"
.el .SS "plugin_add_relationship( 'ChadoModule::SourceName', 'reltype', \f(CW@args\fP )"
.IX Subsection "plugin_add_relationship( 'ChadoModule::SourceName', 'reltype', @args )"
Sometimes application-specific plugins need to add relationships to
the core \s-1BCS\s0 classes.  It can't just be done normally from inside the
classes of the plugins, you need to use this method.
.PP
Example: Bio::Chado::Schema::Result::MyApp::SpecialThing belongs_to
the core \s-1BCS\s0 Organism::Organism, and you would like to be able to call
\&\f(CW\*(C`$organism\->myapp_specialthings\*(C'\fR on organisms to get their
associated SpecialThings.
.PP
.Vb 1
\&    package Bio::Chado::Schema::MyApp::Result::SpecialThing;
\&
\&    # ( do table and column definitions and so forth here )
\&
\&    Bio::Chado::Schema\->plugin_add_relationship(
\&        \*(AqOrganism::Organism\*(Aq, \*(Aqhas_many\*(Aq, (
\&            "myapp_specialthings",
\&            "Bio::Chado::Schema::MyApp::Result::Foo",
\&            { "foreign.organism_id" => "self.organism_id" },
\&            { cascade_copy => 0, cascade_delete => 0 },
\&        );
\&    );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Buels, <rmb32@cornell.edu>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Naama Menda, <nm249@cornell.edu>
.PP
Aureliano Bombarely, <ab782@cornell.edu>
.PP
Jonathan \*(L"Duke\*(R" Leto, <jonathan@leto.net>
