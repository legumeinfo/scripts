.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Chado::Schema::Result::General::Dbxref 3"
.TH Bio::Chado::Schema::Result::General::Dbxref 3 "2015-04-17" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Chado::Schema::Result::General::Dbxref
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A unique, global, public, stable identifier. Not necessarily an external reference \- can reference data items inside the particular chado instance being used. Typically a row in a table can be uniquely identified with a primary identifier (called dbxref_id); a table may also have secondary identifiers (in a linking table <T>_dbxref). A dbxref is generally written as <\s-1DB\s0>:<\s-1ACCESSION\s0> or as <\s-1DB\s0>:<\s-1ACCESSION\s0>:<\s-1VERSION\s0>.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "dbxref_id"
.IX Subsection "dbxref_id"
.Vb 4
\&  data_type: \*(Aqinteger\*(Aq
\&  is_auto_increment: 1
\&  is_nullable: 0
\&  sequence: \*(Aqdbxref_dbxref_id_seq\*(Aq
.Ve
.SS "db_id"
.IX Subsection "db_id"
.Vb 3
\&  data_type: \*(Aqinteger\*(Aq
\&  is_foreign_key: 1
\&  is_nullable: 0
.Ve
.SS "accession"
.IX Subsection "accession"
.Vb 3
\&  data_type: \*(Aqvarchar\*(Aq
\&  is_nullable: 0
\&  size: 255
.Ve
.PP
The local part of the identifier. Guaranteed by the db authority to be unique for that db.
.SS "version"
.IX Subsection "version"
.Vb 4
\&  data_type: \*(Aqvarchar\*(Aq
\&  default_value: (empty string)
\&  is_nullable: 0
\&  size: 255
.Ve
.SS "description"
.IX Subsection "description"
.Vb 2
\&  data_type: \*(Aqtext\*(Aq
\&  is_nullable: 1
.Ve
.SH "RELATIONS"
.IX Header "RELATIONS"
.SS "arraydesigns"
.IX Subsection "arraydesigns"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Arraydesign
.SS "assays"
.IX Subsection "assays"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Assay
.SS "biomaterials"
.IX Subsection "biomaterials"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Biomaterial
.SS "biomaterial_dbxrefs"
.IX Subsection "biomaterial_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::BiomaterialDbxref
.SS "cell_line_dbxrefs"
.IX Subsection "cell_line_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::CellLine::CellLineDbxref
.SS "cvterm"
.IX Subsection "cvterm"
Type: might_have
.PP
Related object: Bio::Chado::Schema::Result::Cv::Cvterm
.SS "cvterm_dbxrefs"
.IX Subsection "cvterm_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::CvtermDbxref
.SS "db"
.IX Subsection "db"
Type: belongs_to
.PP
Related object: Bio::Chado::Schema::Result::General::Db
.SS "dbxrefprops"
.IX Subsection "dbxrefprops"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Cv::Dbxrefprop
.SS "elements"
.IX Subsection "elements"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Element
.SS "features"
.IX Subsection "features"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::Feature
.SS "feature_cvterm_dbxrefs"
.IX Subsection "feature_cvterm_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::FeatureCvtermDbxref
.SS "feature_dbxrefs"
.IX Subsection "feature_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Sequence::FeatureDbxref
.SS "library_dbxrefs"
.IX Subsection "library_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Library::LibraryDbxref
.SS "nd_experiment_dbxrefs"
.IX Subsection "nd_experiment_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdExperimentDbxref
.SS "nd_experiment_stock_dbxrefs"
.IX Subsection "nd_experiment_stock_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::NaturalDiversity::NdExperimentStockDbxref
.SS "organism_dbxrefs"
.IX Subsection "organism_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Organism::OrganismDbxref
.SS "phylonode_dbxrefs"
.IX Subsection "phylonode_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phylogeny::PhylonodeDbxref
.SS "phylotrees"
.IX Subsection "phylotrees"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Phylogeny::Phylotree
.SS "protocols"
.IX Subsection "protocols"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Protocol
.SS "pub_dbxrefs"
.IX Subsection "pub_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Pub::PubDbxref
.SS "stocks"
.IX Subsection "stocks"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::Stock
.SS "stock_dbxrefs"
.IX Subsection "stock_dbxrefs"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Stock::StockDbxref
.SS "studies"
.IX Subsection "studies"
Type: has_many
.PP
Related object: Bio::Chado::Schema::Result::Mage::Study
.SH "MANY-TO-MANY RELATIONSHIPS"
.IX Header "MANY-TO-MANY RELATIONSHIPS"
.SS "biomaterials_mm"
.IX Subsection "biomaterials_mm"
Relation to Bio::Chado::Schema::Result::Mage::Biomaterial (i.e. \f(CW\*(C`biomaterial\*(C'\fR table)
via the \f(CW\*(C`organism_dbxrefs\*(C'\fR table.
.SS "cell_lines_mm"
.IX Subsection "cell_lines_mm"
Relation to Bio::Chado::Schema::Result::CellLine::CellLine (i.e. \f(CW\*(C`cell_line\*(C'\fR table)
via the \f(CW\*(C`cell_line_dbxrefs\*(C'\fR table.
.SS "cvterms_mm"
.IX Subsection "cvterms_mm"
Relation to Bio::Chado::Schema::Result::Cv::Cvterm (i.e. \f(CW\*(C`cvterm\*(C'\fR table)
via the \f(CW\*(C`cvterm_dbxrefs\*(C'\fR table.
.SS "features_mm"
.IX Subsection "features_mm"
Relation to Bio::Chado::Schema::Result::Sequence::Feature (i.e. \f(CW\*(C`feature\*(C'\fR table)
via the \f(CW\*(C`feature_dbxrefs\*(C'\fR table.
.SS "libraries_mm"
.IX Subsection "libraries_mm"
Relation to Bio::Chado::Schema::Result::Library::LibraryDbxref (i.e. \f(CW\*(C`library\*(C'\fR table)
via the \f(CW\*(C`library_dbxrefs\*(C'\fR table.
.SS "organisms_mm"
.IX Subsection "organisms_mm"
Relation to Bio::Chado::Schema::Result::Organism::Organism (i.e. \f(CW\*(C`organism\*(C'\fR table)
via the \f(CW\*(C`organism_dbxrefs\*(C'\fR table.
.SS "phylonodes_mm"
.IX Subsection "phylonodes_mm"
Relation to Bio::Chado::Schema::Result::Phylogeny::Phylonode (i.e. \f(CW\*(C`phylonode\*(C'\fR table)
via the \f(CW\*(C`phylonode_dbxrefs\*(C'\fR table.
.SS "pubs_mm"
.IX Subsection "pubs_mm"
Relation to Bio::Chado::Schema::Result::Pub::Pub (i.e. \f(CW\*(C`pub\*(C'\fR table)
via the \f(CW\*(C`pub_dbxrefs\*(C'\fR table.
.SS "stocks_mm"
.IX Subsection "stocks_mm"
Relation to Bio::Chado::Schema::Result::Stock::Stock (i.e. \f(CW\*(C`stock\*(C'\fR table)
via the \f(CW\*(C`stock_dbxrefs\*(C'\fR table.
